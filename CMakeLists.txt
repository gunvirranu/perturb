cmake_minimum_required(VERSION 3.14)

# Partially generated by `cmake-init`

# ---- In-source guard ----
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
  message(FATAL_ERROR "In-source builds are not supported.")
endif()

project(
    perturb
    VERSION 1.0.0
    DESCRIPTION "A modern C++ wrapper for SGP4 orbit propagation"
    HOMEPAGE_URL "https://github.com/gunvirranu/perturb"
    LANGUAGES C CXX
)

option(perturb_DISABLE_IO "Disable I/O and string functionality" OFF)
option(perturb_ENABLE_CPP_INTERFACE "Expose a small C++ wrapper interface" ON)  # TODO: Revert to default OFF after tested

# For CMake 3.21+, variable is set by default by project()
if(CMAKE_VERSION VERSION_LESS 3.21.0)
    string(
        COMPARE EQUAL
        "${CMAKE_SOURCE_DIR}" "${PROJECT_SOURCE_DIR}"
        PROJECT_IS_TOP_LEVEL
    )
endif()

# ---- Developer mode ----

if(PROJECT_IS_TOP_LEVEL)
    option(perturb_DEVELOPER_MODE "Enable developer mode" OFF)
endif()

# ---- Warning guard ----

# target_include_directories with the SYSTEM modifier will request the compiler
# to omit warnings from the provided paths, if the compiler supports that
# This is to provide a user experience similar to find_package when
# add_subdirectory or FetchContent is used to consume this project
set(warning_guard "")
if(NOT PROJECT_IS_TOP_LEVEL)
    option(
        perturb_INCLUDES_WITH_SYSTEM
        "Use SYSTEM modifier for perturb's includes, disabling warnings"
        ON
    )
    mark_as_advanced(perturb_INCLUDES_WITH_SYSTEM)
    if(perturb_INCLUDES_WITH_SYSTEM)
        set(warning_guard SYSTEM)
    endif()
endif()

# ---- Declare library ----

add_library(
    perturb
    src/perturb.c src/perturb.cpp
)

target_include_directories(
    perturb ${warning_guard}
    PUBLIC
        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
)

target_compile_features(perturb PUBLIC c_std_99)
target_compile_features(perturb PUBLIC cxx_std_11)

if(perturb_DISABLE_IO)
    target_compile_definitions(perturb PUBLIC PERTURB_DISABLE_IO)
endif()

if(perturb_ENABLE_CPP_INTERFACE)
    target_compile_definitions(perturb PUBLIC PERTURB_ENABLE_CPP_INTERFACE)
endif()

# ---- Install rules ----

if(NOT CMAKE_SKIP_INSTALL_RULES)
    include(cmake/install-rules.cmake)
endif()

# ---- Developer mode ----

if(NOT perturb_DEVELOPER_MODE)
    return()
elseif(NOT PROJECT_IS_TOP_LEVEL)
    message(AUTHOR_WARNING "Developer mode enabled")
endif()
# Anything below here is purely for developer mode

include(CTest)
if(BUILD_TESTING)
    add_subdirectory(tests)
endif()
